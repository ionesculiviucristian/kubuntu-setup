GC='\033[0;36m'
AC='\033[0;32m'
NC='\033[0m'

function aliases() {
	echo -e "\n${GC}File system${NC}\n"
	echo -e "  ${AC}..${NC}: Go up a directory level"
	echo -e "  ${AC}...${NC}: Go up two directory levels"
	echo -e "  ${AC}....${NC}: Go up three directory levels"
	echo -e "  ${AC}.....${NC}: Go up four directory levels"
	echo -e "  ${AC}.1${NC}: Go up a directory level"
	echo -e "  ${AC}.2${NC}: Go up two directory levels"
	echo -e "  ${AC}.3${NC}: Go up three directory levels"
	echo -e "  ${AC}.4${NC}: Go up four directory levels"
	echo -e "  ${AC}lll${NC}: List information about the FILEs"
	echo -e "\n${GC}apt package manager${NC}\n"
	echo -e "  ${AC}apti${NC} <PACKAGE...>: Install packages"
	echo -e "  ${AC}aptr${NC} <PACKAGE...>: Remove packages"
	echo -e "  ${AC}aptu${NC}: Upgrade the system by installing/upgrading packages"
	echo -e "\n${GC}Docker${NC}\n"
	echo -e "  ${AC}de${NC} <CONTAINER> [COMMAND] {sh}: Execute a command in a running container"
	echo -e "  ${AC}der${NC} <CONTAINER> [COMMAND] {sh}: Execute a command in a running container, as root"
	echo -e "  ${AC}di${NC} <NAME|ID>: Return low-level information on Docker objects"
	echo -e "  ${AC}dl${NC} <CONTAINER>: Fetch the logs of a container"
	echo -e "  ${AC}dlclr${NC}: Empty the log files from all containers"
	echo -e "  ${AC}dlsz${NC}: List all container log files ordered by their size"
	echo -e "  ${AC}dps${NC}: List running containers"
	echo -e "  ${AC}dpsa${NC}: List all containers"
	echo -e "  ${AC}dpsaf${NC} <PATTERN>: Filter all containers list using grep pattern"
	echo -e "  ${AC}dpsf${NC} <PATTERN>: Filter running containers list using grep pattern"
	echo -e "  ${AC}ds${NC} <CONTAINER...>: Stop one or more running containers"
	echo -e "  ${AC}dsa${NC}: Stop all running containers"
	echo -e "  ${AC}dsts${NC}: Display a live stream of running containers resource usage statistics"
	echo -e "\n${GC}Docker compose${NC}\n"
	echo -e "  ${AC}dc${NC}: Define and run multi-container applications with Docker"
	echo -e "  ${AC}dcb${NC} <SERVICE...>: Build or rebuild services"
	echo -e "  ${AC}dcd${NC} <SERVICE...>: Stop and remove containers, networks"
	echo -e "  ${AC}dcdv${NC} <SERVICE...>: Stop and remove containers, networks including volumes"
	echo -e "  ${AC}dce${NC} <SERVICE> [COMMAND] {sh}: Execute a command in a running container"
	echo -e "  ${AC}dcer${NC} <SERVICE> [COMMAND] {sh}: Execute a command in a running container, as root"
	echo -e "  ${AC}dci${NC} <SERVICE>: Return low-level information on Docker objects"
	echo -e "  ${AC}dcl${NC} <SERVICE...>: View output from containers"
	echo -e "  ${AC}dcps${NC} <SERVICE...>: List containers"
	echo -e "  ${AC}dcpsf${NC} <SERVICE>: Filter running containers list using grep pattern"
	echo -e "  ${AC}dcr${NC} <SERVICE...>: Restart service containers"
	echo -e "  ${AC}dcrl${NC} <SERVICE...>: Restart service containers and view output from containers"
	echo -e "  ${AC}dcu${NC} <SERVICE...>: Create and start containers"
	echo -e "  ${AC}dcub${NC} <SERVICE...>: Build, create and start containers"
	echo -e "  ${AC}dcuf${NC} <SERVICE...>: Recreate and start containers even if their configuration and image haven't changed"
	echo -e "  ${AC}dcul${NC} <SERVICE...>: Create, start and view output from containers"
	echo -e "\n${GC}git${NC}\n"
	echo -e "  ${AC}gib${NC}: List branches"
	echo -e "  ${AC}gibc${NC} <NAME>: Create branch"
	echo -e "  ${AC}gibco${NC} <NAME>: Create and checkout branch"
	echo -e "  ${AC}gibd${NC} <BRANCH>: Delete merged branch"
	echo -e "  ${AC}gibdf${NC} <BRANCH>: Delete non-merged branch"
	echo -e "  ${AC}gibr${NC} <OLD BRANCH> <NEW BRANCH>: Rename branch"
	echo -e "  ${AC}gic${NC} <MESSAGE>: Stage and commit all files from current directory"
	echo -e "  ${AC}gica${NC} <MESSAGE>: Ammend commit"
	echo -e "  ${AC}gico${NC} <BRANCH>: Checkout branch"
	echo -e "  ${AC}gicpu${NC} <MESSAGE>: Stage, commit and push all files from current directory"
	echo -e "  ${AC}gicpuf${NC} <MESSAGE>: Stage, commit and force push with lease all files from current directory"
	echo -e "  ${AC}gif${NC}: Download objects and refs from another repository"
	echo -e "  ${AC}gil${NC}: Show commit logs"
	echo -e "  ${AC}gim${NC} <BRANCH...>: Join two or more development histories together"
	echo -e "  ${AC}gip${NC}: Fetch from and integrate with another repository or a local branch"
	echo -e "  ${AC}gipr${NC}: Fetch from and integrate with another repository or a local branch using rebase"
	echo -e "  ${AC}gipu${NC}: Update remote refs along with associated objects"
	echo -e "  ${AC}gipuf${NC}: Force update with lease remote refs along with associated objects"
	echo -e "  ${AC}girh${NC} <SHA1>: Hard reset current HEAD to the specified state"
	echo -e "  ${AC}gis${NC}: Stash the changes in a dirty working directory away"
	echo -e "  ${AC}gisq${NC} <SHA1> <MESSAGE>: Squash commits"
	echo -e "\n${GC}poetry${NC}\n"
	echo -e "  ${AC}poi${NC}: Install project dependencies"
	echo -e "  ${AC}pos${NC}: Spawn a shell within the virtual environment"
	echo -e "\n${GC}Misc${NC}\n"
	echo -e "  ${AC}backup${NC}: Backup files from current directory to \`~/.backups\`"
	echo -e "  ${AC}logs${NC}: Tail all journal entries"
	echo -e "  ${AC}logsb${NC}: View all journal entries since last boot"
	echo -e "  ${AC}ports${NC}: List ports"
	echo -e "  ${AC}proj${NC}: Set the current working directory to \`~/Projects\`"
	echo -e "  ${AC}projc${NC} <NAME>: Create a new project in \`~/Projects\`"
	echo -e "  ${AC}projo${NC} <NAME>: Open a project found in \`~/Projects\` with code editor"
	echo -e "  ${AC}rld${NC}: Source \`~/.bashrc\`"
	echo -e "  ${AC}srv${NC}: List services"
}
